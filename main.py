import socket
import threading
import requests
from bs4 import BeautifulSoup

def is_port_open(host, port):
    try:
        # Create a TCP socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)  # Set a timeout to avoid hanging indefinitely

        # Attempt to connect to the host and port
        s.connect((host, port))

        # If the connection is successful, the port is open
        print(f"Port {port} on {host} is open.")
        return True
    except socket.error:
        # If the connection fails, the port is closed
        return False
    finally:
        # Close the socket regardless of the result
        s.close()

def get_embedded_links(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            links = [link.get("href") for link in soup.find_all("a") if link.get("href")]
            print("Embedded links on the website:")
            for link in links:
                print(link)
        else:
            print("Unable to fetch embedded links. The web server returned a non-200 status code.")
    except requests.exceptions.RequestException:
        print("Unable to fetch embedded links. An error occurred during the HTTP request.")

def scan_ports(host, ports):
    open_ports = []
    for port in ports:
        if is_port_open(host, port):
            open_ports.append(port)
    return open_ports

if __name__ == "__main__":
    target = input("Enter the IP address or domain name you want to scan: ")
    start_port = int(input("Enter the start port: "))
    end_port = int(input("Enter the end port: "))

    try:
        # Try to resolve the target to an IP address
        try:
            ip = socket.gethostbyname(target)
        except socket.gaierror:
            print(f"Unable to resolve {target}. Please enter a valid IP address or domain name.")
            exit()

        print(f"Scanning ports for {target} ({ip}):")

        # Create a list of ports to scan
        ports_to_scan = list(range(start_port, end_port + 1))

        # Divide the ports into chunks to run them in parallel threads
        chunk_size = 100
        port_chunks = [ports_to_scan[i:i + chunk_size] for i in range(0, len(ports_to_scan), chunk_size)]

        # Create threads to scan ports in parallel
        threads = []
        for chunk in port_chunks:
            thread = threading.Thread(target=scan_ports, args=(ip, chunk))
            threads.append(thread)
            thread.start()

        # Wait for all threads to finish
        for thread in threads:
            thread.join()

        # Check if the target is a web server and fetch embedded links
        if 80 in ports_to_scan:
            print("\nChecking for embedded links (port 80 - HTTP):")
            url = f"http://{target}"
            get_embedded_links(url)
        elif 443 in ports_to_scan:
            print("\nChecking for embedded links (port 443 - HTTPS):")
            url = f"https://{target}"
            get_embedded_links(url)

    except KeyboardInterrupt:
        print("\nPort scanning canceled.")
    finally:
        print("Port scanning finished.")
